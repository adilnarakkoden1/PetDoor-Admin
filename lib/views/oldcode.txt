// import 'package:ecommerce_admin_app/containers/additional_confirm.dart';
// import 'package:ecommerce_admin_app/controllers/db_service.dart';
// import 'package:ecommerce_admin_app/models/products_model.dart';
// import 'package:ecommerce_admin_app/providers/admin_provider.dart';
// import 'package:flutter/material.dart';
// import 'package:provider/provider.dart';

// class ProductsPage extends StatefulWidget {
//   const ProductsPage({super.key});

//   @override
//   State<ProductsPage> createState() => _ProductsPageState();
// }

// class _ProductsPageState extends State<ProductsPage> {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar:  AppBar(title: Text("Products"),),
//       body:  Consumer<AdminProvider>(builder: (context, value, child) {
//          List<ProductsModel> products = ProductsModel.fromJsonList(value.products) as List<ProductsModel>;

//          if(products.isEmpty){
//           return Center(child: Text("No Products Found"),);
//          }

//          return ListView.builder(itemCount: products.length,
//           itemBuilder:  (context, index) {
//             return ListTile(
//               onLongPress:  (){
//                 showDialog(context: context, builder: (context)=> 
//                 AlertDialog(
//                   title: Text("Choose want you want"),
//                   content: Text("Delete cannot be undone"),
//                   actions: [
//                     TextButton(onPressed: (){
//                       Navigator.pop(context);
//                       showDialog(context: context, builder:(context)=>
//                     AdditionalConfirm(contentText: "Are you sure you want to delete this product",
//                      onYes: (){
//                       DbService().deleteProduct(docId: products[index].id);
//                       Navigator.pop(context);
//                      }, onNo: (){
//                       Navigator.pop(context);
//                     })
//                       );
//                     }, child: Text("Delete Product")),
//                     TextButton(onPressed: (){}, child: Text("Edit Product")),
//                   ],
//                 ));
//               },
//               onTap: ()=> Navigator.pushNamed(context, "/view_product",arguments: products[index]),
//               leading:  Container(height: 50,width: 50,
//               child:  Image.network(products[index].image),),
//               title:  Text(products[index].name, maxLines: 2, overflow: TextOverflow.ellipsis,),
//               subtitle: Row(
//                 mainAxisAlignment:  MainAxisAlignment.spaceBetween,
//                 children: [
//                   Text("â‚¹ ${products[index].new_price.toString()}"),
//                   Container(padding: EdgeInsets.all(4), color: Theme.of(context).primaryColor,child: Text(products[index].category.toUpperCase(),style: TextStyle(color: Colors.white),))
//                 ],
//               ),
//               trailing:  IconButton(icon: Icon(Icons.edit_outlined), onPressed: (){
//                Navigator.pushNamed(context,"/add_product", arguments: products[index]);
//               },),
//             );
//           },);
//       },),

//       floatingActionButton:  FloatingActionButton(child: Icon(Icons.add),
//       onPressed: () {
//         Navigator.pushNamed(context,"/add_product");
        
//       },),
//     );
//   }
// }



import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pet_door_admin/Controllers/db_service.dart';
import 'package:pet_door_admin/Controllers/storage.dart';
import 'package:pet_door_admin/Provider/admin_provider.dart';
import 'package:pet_door_admin/models/product_model.dart';
import 'package:pet_door_admin/widgets/appbar.dart';
import 'package:pet_door_admin/widgets/customTextField.dart';
import 'package:provider/provider.dart';

class AddAnimals extends StatefulWidget {
  const AddAnimals({super.key});

  @override
  State<AddAnimals> createState() => _AddAnimalsState();
}

class _AddAnimalsState extends State<AddAnimals> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _breedController = TextEditingController();
  final TextEditingController _categoryController = TextEditingController();
  final TextEditingController _ageController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _imageController = TextEditingController();
  final ImagePicker picker = ImagePicker();
  late XFile? image = null;

  final Widget space = SizedBox(height: 16);
  final formKey = GlobalKey<FormState>();
  late String productId = "";
  String? _imageError;

  String? selectedGender;
  final List<String> genderOptions = ["Male", "Female"];

  Future<void> pickImage() async {
    image = await picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? res = await Storage().uploadImage(image!.path, context);
      setState(() {
        if (res != null) {
          _imageController.text = res;
          _imageError = null; // Clear error if image is selected
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("Image uploaded successfully")),
          );
        }
      });
    }
  }

  setData(AnimalModel data) {
    productId = data.id;
    _nameController.text = data.name;
    _breedController.text = data.breed;
    _ageController.text = data.age.toString();
    selectedGender = data.gender;
    _amountController.text = data.amount.toString();
    _categoryController.text = data.category;
    _descriptionController.text = data.description;
    _imageController.text = data.image;
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    final arguments = ModalRoute.of(context)!.settings.arguments;
    if (arguments != null && arguments is AnimalModel) {
      setData(arguments);
    }

    return Scaffold(
      appBar: CustomAppBar(
        title: 'Animal Management',
      ),
      body: Form(
        key: formKey,
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.deepPurple.shade50, Colors.deepPurple.shade100],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: SingleChildScrollView(
            child: Column(
              children: [
                GestureDetector(
                  onTap: pickImage,
                  child: CircleAvatar(
                    radius: 50,
                    backgroundImage: image != null
                        ? FileImage(File(image!.path))
                        : (_imageController.text.isNotEmpty
                            ? NetworkImage(_imageController.text)
                            : null) as ImageProvider?,
                    child: image == null && _imageController.text.isEmpty
                        ? const Icon(Icons.camera_alt, size: 40)
                        : null,
                    backgroundColor: Colors.white,
                  ),
                ),
                if (_imageError != null)
                  Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: Text(
                      _imageError!,
                      style: TextStyle(color: Colors.red, fontSize: 12),
                    ),
                  ),
                space,
                CustomTextField(
                  controller: _nameController,
                  label: 'Name',
                  icon: Icons.pets,
                ),
                space,
                CustomTextField(
                  controller: _breedController,
                  label: 'Breed',
                  icon: Icons.info_outline,
                ),
                space,
                _buildCategoryField(context),
                space,
                _buildGenderDropdown(),
                space,
                CustomTextField(
                  controller: _ageController,
                  label: 'Age',
                  icon: Icons.cake_outlined,
                  keyboardType: TextInputType.number,
                ),
                space,
                CustomTextField(
                  controller: _amountController,
                  label: 'Amount',
                  icon: Icons.attach_money_outlined,
                  keyboardType: TextInputType.number,
                ),
                space,
                CustomTextField(
                  controller: _descriptionController,
                  label: 'Description',
                  icon: Icons.description_outlined,
                  maxLines: 3,
                ),
                space,
                ElevatedButton(
                  onPressed: () {
                    if (formKey.currentState!.validate()) {
                      if (_imageController.text.isEmpty) {
                        setState(() {
                          _imageError = "Please select an image.";
                        });
                        return;
                      }
                      if (selectedGender == null) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                              content: Text("Please select a gender.")),
                        );
                        return;
                      }
                      Map<String, dynamic> data = {
                        "name": _nameController.text,
                        "age": int.parse(_ageController.text),
                        "amount": int.parse(_amountController.text),
                        "gender": selectedGender,
                        "category": _categoryController.text,
                        "desc": _descriptionController.text,
                        "image": _imageController.text,
                      };

                      if (productId.isNotEmpty) {
                        DbService().updateAnimals(docId: productId, data: data);
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("Product Updated")),
                        );
                      } else {
                        DbService().createAnimals(data: data);
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("Product Added")),
                        );
                      }
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                        vertical: 16, horizontal: 40),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                    backgroundColor: Colors.deepPurpleAccent,
                    foregroundColor: Colors.white,
                  ),
                  child: Text(
                    productId.isNotEmpty ? "Update Product" : "Add Product",
                    style: const TextStyle(fontSize: 16),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildCategoryField(BuildContext context) {
    return GestureDetector(
      onTap: () {
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text("Select Category:"),
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Consumer<AdminProvider>(
                  builder: (context, value, child) => Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: value.categories
                        .map(
                          (e) => ListTile(
                            title: Text(e["name"]),
                            onTap: () {
                              _categoryController.text = e["name"];
                              setState(() {});
                              Navigator.pop(context);
                            },
                          ),
                        )
                        .toList(),
                  ),
                ),
              ],
            ),
          ),
        );
      },
      child: CustomTextField(
        controller: _categoryController,
        label: 'Category',
        icon: Icons.category_outlined,
      ),
    );
  }

  Widget _buildGenderDropdown() {
    return DropdownButtonFormField<String>(
      value: selectedGender,
      decoration: InputDecoration(
        labelText: 'Gender',
        prefixIcon: Icon(Icons.male, color: Colors.deepPurple),
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
      ),
      items: genderOptions
          .map((gender) => DropdownMenuItem(
                value: gender,
                child: Text(gender),
              ))
          .toList(),
      onChanged: (value) {
        setState(() {
          selectedGender = value!;
        });
      },
      validator: (value) => value == null ? 'Please select a gender' : null,
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pet_door_admin/Controllers/db_service.dart';
import 'package:pet_door_admin/Controllers/storage.dart';
import 'package:pet_door_admin/Provider/admin_provider.dart';
import 'package:pet_door_admin/models/product_model.dart';
import 'package:provider/provider.dart';

class ModifyProduct extends StatefulWidget {
  const ModifyProduct({super.key});

  @override
  State<ModifyProduct> createState() => _ModifyProductState();
}

class _ModifyProductState extends State<ModifyProduct> {
  late String productId = "";
  final formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _breedController = TextEditingController();
  final TextEditingController _categoryController = TextEditingController();
  final TextEditingController _ageController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _imageController = TextEditingController();
  final ImagePicker picker = ImagePicker();
  late XFile? image = null;

  String? selectedGender;
  final List<String> genderOptions = ['Male', 'Female'];

  // function to pick image using image picker
  Future<void> pickImage() async {
    image = await picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? res = await Storage().uploadImage(image!.path, context);
      setState(() {
        if (res != null) {
          _imageController.text = res;
          print("set image url ${res} : ${_imageController.text}");
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text("Image uploaded successfully")));
        }
      });
    }
  }

  // set the data from arguments
  void setData(AnimalModel data) {
    productId = data.id;
    _nameController.text = data.name;
    _breedController.text = data.breed;
    _ageController.text = data.age.toString();
    selectedGender = data.gender;
    _amountController.text = data.amount.toString();
    _categoryController.text = data.category;
    _descriptionController.text = data.description;
    _imageController.text = data.image;
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    final arguments = ModalRoute.of(context)!.settings.arguments;
    if (arguments != null && arguments is AnimalModel) {
      setData(arguments);
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(productId.isNotEmpty ? "Update Product" : "Add Product"),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Form(
            key: formKey,
            child: Column(
              children: [
                TextFormField(
                  controller: _nameController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                      hintText: "Product Name",
                      labelText: "Product Name",
                      fillColor: Colors.deepPurple.shade50,
                      filled: true),
                ),
                SizedBox(height: 10),
                TextFormField(
                  controller: _breedController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                    hintText: "Breed",
                    labelText: "Breed",
                    fillColor: Colors.deepPurple.shade50,
                    filled: true,
                  ),
                ),
                SizedBox(height: 10),
                TextFormField(
                  controller: _categoryController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  readOnly: true,
                  decoration: InputDecoration(
                      hintText: "Category",
                      labelText: "Category",
                      fillColor: Colors.deepPurple.shade50,
                      filled: true),
                  onTap: () {
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text("Select Category:"),
                        content: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Consumer<AdminProvider>(
                              builder: (context, value, child) =>
                                  SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: value.categories
                                      .map((e) => TextButton(
                                          onPressed: () {
                                            _categoryController.text =
                                                e["name"];
                                            setState(() {});
                                            Navigator.pop(context);
                                          },
                                          child: Text(e["name"])))
                                      .toList(),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
                SizedBox(
                  height: 10,
                ),
                _buildGenderDropdown(),
                TextFormField(
                  controller: _ageController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                    hintText: "Age",
                    labelText: "Age",
                    fillColor: Colors.deepPurple.shade50,
                    filled: true,
                  ),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 10),
                TextFormField(
                  controller: _amountController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                      hintText: "Quantity Left",
                      labelText: "Quantity Left",
                      fillColor: Colors.deepPurple.shade50,
                      filled: true),
                ),
                SizedBox(height: 10),
                SizedBox(height: 10),
                TextFormField(
                  controller: _descriptionController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                      hintText: "Description",
                      labelText: "Description",
                      fillColor: Colors.deepPurple.shade50,
                      filled: true),
                  maxLines: 8,
                ),
                SizedBox(height: 10),
                image == null
                    ? _imageController.text.isNotEmpty
                        ? Container(
                            margin: EdgeInsets.all(20),
                            height: 100,
                            width: double.infinity,
                            color: Colors.deepPurple.shade50,
                            child: Image.network(
                              _imageController.text,
                              fit: BoxFit.contain,
                            ),
                          )
                        : SizedBox()
                    : Container(
                        margin: EdgeInsets.all(20),
                        height: 200,
                        width: double.infinity,
                        color: Colors.deepPurple.shade50,
                        child: Image.file(
                          File(image!.path),
                          fit: BoxFit.contain,
                        )),
                ElevatedButton(
                  onPressed: () {
                    pickImage();
                  },
                  child: Text("Pick Image"),
                ),
                SizedBox(height: 10),
                TextFormField(
                  controller: _imageController,
                  validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                  decoration: InputDecoration(
                      hintText: "Image Link",
                      labelText: "Image Link",
                      fillColor: Colors.deepPurple.shade50,
                      filled: true),
                ),
                SizedBox(height: 10),
                SizedBox(
                  height: 60,
                  width: double.infinity,
                  child: ElevatedButton(
                      onPressed: () {
                        if (formKey.currentState!.validate()) {
                          Map<String, dynamic> data = {
                            "name": _nameController.text,
                            "breed": _breedController.text,
                            "category": _categoryController.text,
                            "gender": selectedGender,
                            "age": int.parse(_ageController.text),
                            "amount": int.parse(_amountController.text),
                            "desc": _descriptionController.text,
                            "image": _imageController.text,
                          };

                          if (productId.isNotEmpty) {
                            DbService()
                                .updateAnimals(docId: productId, data: data);
                            Navigator.pop(context);
                            ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text("Product Updated")));
                          } else {
                            DbService().createAnimals(data: data);
                            Navigator.pop(context);
                            ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text("Product Added")));
                          }
                        }
                      },
                      child: Text(productId.isNotEmpty
                          ? "Update Product"
                          : "Add Product")),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildGenderDropdown() {
    return DropdownButtonFormField<String>(
      value: genderOptions.contains(selectedGender) ? selectedGender : null,
      decoration: InputDecoration(
        labelText: 'Gender',
        prefixIcon: Icon(Icons.male, color: Colors.deepPurple),
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
      ),
      items: genderOptions
          .map((gender) => DropdownMenuItem(
                value: gender,
                child: Text(gender),
              ))
          .toList(),
      onChanged: (value) {
        setState(() {
          selectedGender = value;
        });
      },
      validator: (value) => value == null ? 'Please select a gender' : null,
    );
  }
}












import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pet_door_admin/Controllers/storage.dart';
import 'package:pet_door_admin/Provider/admin_provider.dart';
import 'package:pet_door_admin/models/category_model.dart';
import 'package:pet_door_admin/widgets/appbar.dart';
import 'package:provider/provider.dart';
import '../Controllers/db_service.dart';

class ViewCategories extends StatefulWidget {
  const ViewCategories({super.key});

  @override
  State<ViewCategories> createState() => _CategoriesPageState();
}

class _CategoriesPageState extends State<ViewCategories> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(
        title: 'Animal Management',
      ),
      body: Consumer<AdminProvider>(
        builder: (context, value, child) {
          List<CategoryModel> categories =
              CategoryModel.fromJsonList(value.categories);

          if (value.categories.isEmpty) {
            return Center(
              child: Text(
                "No Categories Found",
                style: TextStyle(fontSize: 18, color: Colors.grey[700]),
              ),
            );
          }

          return ListView.builder(
            itemCount: categories.length,
            itemBuilder: (context, index) {
              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                elevation: 4,
                child: ListTile(
                  leading: Container(
                    height: 50,
                    width: 50,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      image: DecorationImage(
                        image: NetworkImage(
                          categories[index].image.isEmpty
                              ? "https://demofree.sirv.com/nope-not-here.jpg"
                              : categories[index].image,
                        ),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  title: Text(
                    categories[index].name,
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                    "Tap to edit or delete",
                    style: TextStyle(color: Colors.grey[600]),
                  ),
                  onTap: () {
                    _showOptionsDialog(context, categories[index]);
                  },
                  trailing: IconButton(
                    icon: Icon(Icons.edit_outlined, color: Colors.deepPurple),
                    onPressed: () {
                      _showModifyDialog(context, categories[index]);
                    },
                  ),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _showModifyDialog(context, null);
        },
        child: Icon(Icons.add),
        backgroundColor: Colors.grey,
      ),
    );
  }

  void _showOptionsDialog(BuildContext context, CategoryModel category) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("What do you want to do?"),
        content: Text("Delete action cannot be undone."),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _showDeleteConfirmDialog(context, category.id);
            },
            child: Text("Delete Category"),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _showModifyDialog(context, category);
            },
            child: Text("Update Category"),
          ),
        ],
      ),
    );
  }

  void _showDeleteConfirmDialog(BuildContext context, String categoryId) {
    showDialog(
      context: context,
      builder: (context) => AdditionalConfirm(
        contentText: "Are you sure you want to delete this category?",
        onYes: () {
          DbService().deleteCategory(docId: categoryId);
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Category Deleted")),
          );
        },
        onNo: () {
          Navigator.pop(context);
        },
      ),
    );
  }

  void _showModifyDialog(BuildContext context, CategoryModel? category) {
    showDialog(
      context: context,
      builder: (context) => ModifyCategory(
        isUpdating: category != null,
        categoryId: category?.id ?? "",
        image: category?.image,
        name: category?.name,
      ),
    );
  }
}

//------------------------
class ModifyCategory extends StatefulWidget {
  final bool isUpdating;
  final String? name;
  final String categoryId;
  final String? image;

  const ModifyCategory({
    super.key,
    required this.isUpdating,
    this.name,
    required this.categoryId,
    this.image,
  });

  @override
  State<ModifyCategory> createState() => _ModifyCategoryState();
}

class _ModifyCategoryState extends State<ModifyCategory> {
  final formKey = GlobalKey<FormState>();
  final ImagePicker picker = ImagePicker();
  late XFile? image = null;
  TextEditingController categoryController = TextEditingController();
  TextEditingController imageController = TextEditingController();

  @override
  void initState() {
    if (widget.isUpdating && widget.name != null) {
      categoryController.text = widget.name!;
      imageController.text = widget.image!;
    }
    super.initState();
  }

  Future<void> pickImage() async {
    image = await picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? res = await Storage().uploadImage(image!.path, context);
      setState(() {
        if (res != null) {
          imageController.text = res;
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text("Image uploaded successfully")));
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Center(
        child: Text(
          widget.isUpdating ? "Update Category" : "Add Category",
          style: const TextStyle(fontWeight: FontWeight.w700),
        ),
      ),
      content: SingleChildScrollView(
        child: Form(
          key: formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 10),
              TextFormField(
                controller: categoryController,
                validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                decoration: InputDecoration(
                  hintText: "Category Name",
                  labelText: "Category Name",
                  fillColor: Colors.deepPurple.shade50,
                  filled: true,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
              const SizedBox(height: 10),
              if (image == null && imageController.text.isNotEmpty)
                Container(
                  margin: EdgeInsets.all(20),
                  height: 100,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    color: Colors.deepPurple.shade50,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.network(
                      imageController.text,
                      fit: BoxFit.cover,
                    ),
                  ),
                )
              else if (image != null)
                Container(
                  margin: const EdgeInsets.all(20),
                  height: 200,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    color: Colors.deepPurple.shade50,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.file(
                      File(image!.path),
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
              ElevatedButton(
                onPressed: pickImage,
                child: Text("Pick Image"),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: Colors.deepPurple,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
              const SizedBox(height: 10),
              TextFormField(
                controller: imageController,
                validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                decoration: InputDecoration(
                  hintText: "Image Link",
                  labelText: "Image Link",
                  fillColor: Colors.deepPurple.shade50,
                  filled: true,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text("Cancel"),
        ),
        TextButton(
            onPressed: () async {
              if (formKey.currentState!.validate()) {
                if (widget.isUpdating) {
                  await DbService().updateCategory(
                      docId: widget.categoryId,
                      data: {
                        "name": categoryController.text.toLowerCase(),
                        "image": imageController.text
                      });
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    content: Text("Category Updated"),
                  ));
                } else {
                  await DbService().createCategory(data: {
                    "name": categoryController.text.toLowerCase(),
                    "image": imageController.text
                  });
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    content: Text("Category Added"),
                  ));
                }
                Navigator.pop(context);
              }
            },
            child: Text(widget.isUpdating ? "Update" : "Add")),
      ],
    );
  }
}

class AdditionalConfirm extends StatelessWidget {
  final String contentText;
  final VoidCallback onYes;
  final VoidCallback onNo;

  const AdditionalConfirm({
    Key? key,
    required this.contentText,
    required this.onYes,
    required this.onNo,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Confirmation',
          style: TextStyle(color: Colors.deepPurple)),
      content: Text(contentText),
      actions: [
        TextButton(
          onPressed: onNo,
          child: const Text('No'),
        ),
        TextButton(
          onPressed: onYes,
          child: const Text('Yes'),
        ),
      ],
    );
  }
}
