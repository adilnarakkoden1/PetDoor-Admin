// import 'package:flutter/material.dart';
// import 'package:pet_door_admin/Controllers/authentication_service.dart';
// import 'package:pet_door_admin/views/register_page.dart';

// class LoginPage extends StatefulWidget {
//   const LoginPage({super.key});

//   @override
//   State<LoginPage> createState() => _LoginPageState();
// }

// class _LoginPageState extends State<LoginPage> {
//   final formkey = GlobalKey<FormState>();
//   TextEditingController _emailController = TextEditingController();
//   TextEditingController _passwordController = TextEditingController();
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       body: Container(
//         margin: EdgeInsets.all(15),
//         child: Form(
//           key: formkey,
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               Text(
//                 'Sign In',
//                 style: TextStyle(fontSize: 20),
//               ),
//               TextFormField(
//                 autovalidateMode: AutovalidateMode.onUserInteraction,
//                 decoration: InputDecoration(
//                     labelText: "Username",
//                     border: OutlineInputBorder(
//                         borderRadius: BorderRadius.circular(20))),
//                 validator: (value) =>
//                     value!.isEmpty ? "Email cannot be empty" : null,
//                 controller: _emailController,
//               ),
//               SizedBox(
//                 height: 12,
//               ),
//               TextFormField(
//                 autovalidateMode: AutovalidateMode.onUserInteraction,
//                 decoration: InputDecoration(
//                     labelText: "Password",
//                     border: OutlineInputBorder(
//                         borderRadius: BorderRadius.circular(20))),
//                 validator: (value) =>
//                     value!.isEmpty ? "Password cannot be empty" : null,
//                 controller: _passwordController,
//                 obscureText: true,
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.end,
//                 children: [
//                   TextButton(onPressed: () {}, child: Text('Forget Password'))
//                 ],
//               ),
//               SizedBox(
//                 height: 25,
//               ),
//               ElevatedButton(
//   onPressed: () {
//     if (formkey.currentState!.validate()) {
//       AuthService()
//           .loginWithEmail(
//               _emailController.text, _passwordController.text)
//           .then((value) {
//         if (value == "Login Successful") {
//           ScaffoldMessenger.of(context).showSnackBar(
//               SnackBar(content: Text("Login Success")));
//           Navigator.restorablePushNamedAndRemoveUntil(
//               context, "/home", (route) => false);
//         } else {
//           ScaffoldMessenger.of(context).showSnackBar(SnackBar(
//             content: Text(
//               value,
//               style: TextStyle(color: Colors.white),
//             ),
//             backgroundColor: Colors.red,
//           ));
//         }
//       });
//     }
//   },
//   child: Text('Login'),
// ),

//               SizedBox(
//                 height: 12,
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.center,
//                 children: [
//                   Text('Create an Account?'),
//                   TextButton(
//                       onPressed: () {
//                         Navigator.push(
//                             context,
//                             MaterialPageRoute(
//                               builder: (context) => RegisterPage(),
//                             ));
//                       },
//                       child: Text('Sign Up'))
//                 ],
//               )
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }


/*
import 'package:flutter/material.dart';
import 'package:pet_door_admin/Controllers/authentication_service.dart';
import 'package:pet_door_admin/views/register_page.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final formKey = GlobalKey<FormState>();
  TextEditingController _emailController = TextEditingController();
  TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background with gradient
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.white,
                  Colors.deepPurple.withOpacity(0.7),
                  Colors.indigo.withOpacity(0.9)
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
          Center(
            child: SingleChildScrollView(
              padding: EdgeInsets.symmetric(horizontal: 24),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // App logo or icon
                  Container(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          blurRadius: 20,
                          offset: Offset(0, 10),
                        ),
                      ],
                    ),
                    child: CircleAvatar(
                      backgroundImage: AssetImage('assets/3744410.jpg'),
                      radius: 50,
                    ),
                  ),
                  SizedBox(height: 40),
                  // Welcome text
                  Text(
                    'Welcome to PetDoor',
                    style: TextStyle(
                      fontSize: 28,
                      color: Colors.deepPurpleAccent,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 1.2,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    'Login as a Shelter Owner',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.black.withOpacity(0.6),
                    ),
                  ),
                  SizedBox(height: 50),
                  Container(
                    padding: EdgeInsets.symmetric(vertical: 20, horizontal: 24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 10,
                          offset: Offset(0, 10),
                        ),
                      ],
                    ),
                    child: Form(
                      key: formKey,
                      child: Column(
                        children: [
                          TextFormField(
                            controller: _emailController,
                            decoration: InputDecoration(
                              labelText: 'Email',
                              labelStyle: TextStyle(color: Colors.deepPurple),
                              filled: true,
                              fillColor: Colors.white.withOpacity(0.2),
                              prefixIcon:
                                  Icon(Icons.email, color: Colors.deepPurple),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide.none,
                              ),
                              errorStyle: TextStyle(color: Colors.orange),
                            ),
                            validator: (value) => value!.isEmpty
                                ? 'This field is required'
                                : null,
                          ),
                          SizedBox(height: 20),
                          TextFormField(
                            controller: _passwordController,
                            obscureText: true,
                            decoration: InputDecoration(
                              labelText: 'Password',
                              labelStyle: TextStyle(color: Colors.deepPurple),
                              filled: true,
                              fillColor: Colors.white.withOpacity(0.2),
                              prefixIcon:
                                  Icon(Icons.lock, color: Colors.deepPurple),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide.none,
                              ),
                              errorStyle: TextStyle(color: Colors.orange),
                            ),
                            validator: (value) => value!.isEmpty
                                ? 'This field is required'
                                : null,
                          ),
                          SizedBox(height: 10),
                          // Forgot Password
                          Align(
                            alignment: Alignment.centerRight,
                            child: TextButton(
                              onPressed: () {
                                // Implement forgot password functionality
                              },
                              child: Text(
                                'Forgot Password?',
                                style: TextStyle(
                                  color: Colors.deepPurpleAccent,
                                  fontSize: 14,
                                ),
                              ),
                            ),
                          ),
                          SizedBox(height: 40),
                          // Login Button
                          ElevatedButton(
                            onPressed: () {
                              if (formKey.currentState!.validate()) {
                                AuthService()
                                    .loginWithEmail(_emailController.text,
                                        _passwordController.text)
                                    .then((value) {
                                  if (value == 'Login Successful') {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(
                                            content: Text('Login Successful')));
                                    Navigator.restorablePushNamedAndRemoveUntil(
                                        context, '/home', (route) => false);
                                  } else {
                                    ScaffoldMessenger.of(context)
                                        .showSnackBar(SnackBar(
                                      content: Text(value,
                                          style:
                                              TextStyle(color: Colors.white)),
                                      backgroundColor: Colors.red,
                                    ));
                                  }
                                });
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.deepPurple,
                              foregroundColor: Colors.white,
                              elevation: 5,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30),
                              ),
                              padding: EdgeInsets.symmetric(
                                horizontal: 120,
                                vertical: 15,
                              ),
                            ),
                            child: Text(
                              'Login',
                              style: TextStyle(fontSize: 18),
                            ),
                          ),
                          SizedBox(height: 30),
                          // Sign-up option
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                'Don’t have an account?',
                                style: TextStyle(color: Colors.black87),
                              ),
                              TextButton(
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => RegisterPage(),
                                    ),
                                  );
                                },
                                child: Text(
                                  'Sign Up',
                                  style: TextStyle(
                                    color: Colors.orangeAccent,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

*/



import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pet_door_admin/Controllers/storage.dart';
import 'package:pet_door_admin/Provider/admin_provider.dart';
import 'package:pet_door_admin/models/category_model.dart';
import 'package:provider/provider.dart';

import '../Controllers/db_service.dart';

// Main ViewCategories widget
class ViewCategories extends StatefulWidget {
  const ViewCategories({super.key});

  @override
  State<ViewCategories> createState() => _CategoriesPageState();
}

class _CategoriesPageState extends State<ViewCategories> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Categories")),
      body: Consumer<AdminProvider>(
        builder: (context, value, child) {
          List<CategoryModel> categories =
              CategoryModel.fromJsonList(value.categories);

          if (value.categories.isEmpty) {
            return Center(
              child: Text("No Categories Found"),
            );
          }

          return ListView.builder(
            itemCount: value.categories.length,
            itemBuilder: (context, index) {
              return ListTile(
                leading: Container(
                  height: 50,
                  width: 50,
                  child: Image.network(
                    categories[index].image == null ||
                            categories[index].image == ""
                        ? "https://demofree.sirv.com/nope-not-here.jpg"
                        : categories[index].image,
                  ),
                ),
                onTap: () {
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: Text("What do you want to do?"),
                      content: Text("Delete action cannot be undone."),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context);
                            showDialog(
                              context: context,
                              builder: (context) => AdditionalConfirm(
                                contentText:
                                    "Are you sure you want to delete this category?",
                                onYes: () {
                                  DbService().deleteCategory(
                                      docId: categories[index].id);
                                  Navigator.pop(context);
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(content: Text("Category Deleted")),
                                  );
                                },
                                onNo: () {
                                  Navigator.pop(context);
                                },
                              ),
                            );
                          },
                          child: Text("Delete Category"),
                        ),
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context);
                            showDialog(
                              context: context,
                              builder: (context) => ModifyCategory(
                                isUpdating: true,
                                categoryId: categories[index].id,
                                image: categories[index].image,
                                name: categories[index].catName,
                              ),
                            );
                          },
                          child: Text("Update Category"),
                        ),
                      ],
                    ),
                  );
                },
                title: Text(
                  categories[index].catName,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                trailing: IconButton(
                  icon: Icon(Icons.edit_outlined),
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (context) => ModifyCategory(
                        isUpdating: true,
                        categoryId: categories[index].id,
                        image: categories[index].image,
                        name: categories[index].catName,
                      ),
                    );
                  },
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) =>
                ModifyCategory(isUpdating: false, categoryId: ""),
          );
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

class ModifyCategory extends StatefulWidget {
  final bool isUpdating;
  final String? name;
  final String categoryId;
  final String? image;
  const ModifyCategory({
    super.key,
    required this.isUpdating,
    this.name,
    required this.categoryId,
    this.image,
  });

  @override
  State<ModifyCategory> createState() => _ModifyCategoryState();
}

class _ModifyCategoryState extends State<ModifyCategory> {
  final formKey = GlobalKey<FormState>();
  final ImagePicker picker = ImagePicker();
  late XFile? image = null;
  TextEditingController categoryController = TextEditingController();
  TextEditingController imageController = TextEditingController();

  @override
  void initState() {
    if (widget.isUpdating && widget.name != null) {
      categoryController.text = widget.name!;
      imageController.text = widget.image!;
    }
    super.initState();
  }

  // function to pick image using image picker
  Future<void> pickImage() async {
    image = await picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? res = await Storage().uploadImage(image!.path, context);
      setState(() {
        if (res != null) {
          imageController.text = res;
          print("set image url $res : ${imageController.text}");
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text("Image uploaded successfully")));
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.isUpdating ? "Update Category" : "Add Category"),
      content: SingleChildScrollView(
        child: Form(
          key: formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text("All will be converted to lowercase"),
              SizedBox(height: 10),
              TextFormField(
                controller: categoryController,
                validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                decoration: InputDecoration(
                  hintText: "Category Name",
                  label: Text("Category Name"),
                  fillColor: Colors.deepPurple.shade50,
                  filled: true,
                ),
              ),
              SizedBox(height: 10),
              image == null
                  ? imageController.text.isNotEmpty
                      ? Container(
                          margin: EdgeInsets.all(20),
                          height: 100,
                          width: double.infinity,
                          color: Colors.deepPurple.shade50,
                          child: Image.network(
                            imageController.text,
                            fit: BoxFit.contain,
                          ))
                      : SizedBox()
                  : Container(
                      margin: EdgeInsets.all(20),
                      height: 200,
                      width: double.infinity,
                      color: Colors.deepPurple.shade50,
                      child: Image.file(
                        File(image!.path),
                        fit: BoxFit.contain,
                      )),
              ElevatedButton(
                onPressed: () {
                  pickImage();
                },
                child: Text("Pick Image"),
              ),
              SizedBox(height: 10),
              TextFormField(
                controller: imageController,
                validator: (v) => v!.isEmpty ? "This can't be empty." : null,
                decoration: InputDecoration(
                  hintText: "Image Link",
                  label: Text("Image Link"),
                  fillColor: Colors.deepPurple.shade50,
                  filled: true,
                ),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.pop(context);
          },
          child: Text("Cancel"),
        ),
        TextButton(
          onPressed: () async {
            if (formKey.currentState!.validate()) {
              if (widget.isUpdating) {
                await DbService().updateCategory(
                  docId: widget.categoryId,
                  data: {
                    "name": categoryController.text.toLowerCase(),
                    "image": imageController.text,
                  },
                );
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  content: Text("Category Updated"),
                ));
              } else {
                await DbService().createCategory(
                  data: {
                    "name": categoryController.text.toLowerCase(),
                    "image": imageController.text,
                  },
                );
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  content: Text("Category Added"),
                ));
              }
              Navigator.pop(context);
            }
          },
          child: Text(widget.isUpdating ? "Update" : "Add"),
        ),
      ],
    );
  }
}

class AdditionalConfirm extends StatelessWidget {
  final String contentText;
  final VoidCallback onYes;
  final VoidCallback onNo;

  const AdditionalConfirm({
    Key? key,
    required this.contentText,
    required this.onYes,
    required this.onNo,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Confirmation'),
      content: Text(contentText),
      actions: [
        TextButton(
          onPressed: onNo,
          child: Text('No'),
        ),
        TextButton(
          onPressed: onYes,
          child: Text('Yes'),
        ),
      ],
    );
  }
}
// import 'dart:io';

// import 'package:flutter/material.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:pet_door_admin/Controllers/db_service.dart';
// import 'package:pet_door_admin/Controllers/storage.dart';
// import 'package:pet_door_admin/Provider/admin_provider.dart';
// import 'package:pet_door_admin/models/category_model.dart';
// import 'package:provider/provider.dart';

// class ViewCategories extends StatefulWidget {
//   const ViewCategories({super.key});

//   @override
//   State<ViewCategories> createState() => _ViewCategoriesState();
// }

// class _ViewCategoriesState extends State<ViewCategories> {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       body: Consumer<AdminProvider>(builder: (context, value, child) {
//         List<CategoryModel> categories =
//             CategoryModel.fromJsonList(value.categories);
//         if (value.categories.isEmpty) {
//           return Center(child: Text('No categories found'));
//         } else {
//           return ListView.builder(
//               itemCount: value.categories.length,
//               itemBuilder: (context, index) {
//                 ListTile(
//                     title: Text(
//                   categories[index].catName,
//                   overflow: TextOverflow.ellipsis,
//                 ));
//               });
//         }
//       }),
//       floatingActionButton: FloatingActionButton.small(
//         onPressed: () {
//           showDialog(
//               context: context,
//               builder: (context) =>
//                   UpdateCategory(isupdating: false, categoryid: ""));
//         },
//         child: Icon(Icons.add),
//       ),
//     );
//   }
// }

// class UpdateCategory extends StatefulWidget {
//   final bool isupdating;
//   final String? name;
//   final String categoryid;
//   final String? image;

//   const UpdateCategory(
//       {super.key,
//       this.name,
//       required this.categoryid,
//       required this.isupdating,
//       this.image});

//   @override
//   State<UpdateCategory> createState() => _UpdateCategoryState();
// }

// class _UpdateCategoryState extends State<UpdateCategory> {
//   final formkey = GlobalKey<FormState>();
//   final ImagePicker picker = ImagePicker();
//   late XFile? image = null;
//   final TextEditingController _categoryController = TextEditingController();
//   final TextEditingController _imageController = TextEditingController();
//   void initState() {
//     _categoryController.text = widget.name ?? "";
//     _imageController.text = widget.image ?? "";

//     super.initState();
//   }

//   Future pickImage() async {
//     image = await picker.pickImage(source: ImageSource.gallery);
//     if (image != null) {
//       String? res = await Storage().uploadImage(image!.path, context);
//       setState(() {
//         if (res != null) {
//           _imageController.text = res;
//           print("set image url${res}:${_imageController.text}");
//           ScaffoldMessenger.of(context).showSnackBar(
//               const SnackBar(content: Text("Uploded Successfully")));
//         }
//       });
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return AlertDialog(
//       title: Text('Add Category'),
//       content: SingleChildScrollView(
//         child: Column(
//           children: [
//             TextFormField(
//               controller: _categoryController,
//               decoration: InputDecoration(
//                   isDense: true,
//                   border: OutlineInputBorder(
//                       borderRadius: BorderRadius.circular(8))),
//               validator: (value) =>
//                   value!.isEmpty ? 'This field is required' : null,
//             ),
//             SizedBox(height: 8),
//             image == null
//                 ? _imageController.text.isNotEmpty
//                     ? Container(
//                         margin: EdgeInsets.all(15),
//                         height: 100,
//                         color: Colors.deepOrange,
//                         child: Image.network(
//                           _imageController.text,
//                           fit: BoxFit.contain,
//                         ),
//                       )
//                     : SizedBox()
//                 : Container(
//                     margin: EdgeInsets.all(15),
//                     height: 100,
//                     color: Colors.deepOrange,
//                     child: Image.file(
//                       File(image!.path),
//                       fit: BoxFit.contain,
//                     ),
//                   ),
//             ElevatedButton(
//               onPressed: () {
//                 pickImage();
//               },
//               child: Text("Select Image"),
//             ),
//           ],
//         ),
//       ),
//       actions: [
//         TextButton(
//           onPressed: () {
//             if (formkey.currentState!.validate()) {
//               if (widget.isupdating) {
//                 DbService().updateCategory(docId: widget.categoryid, data: {
//                   "name": _categoryController.text.toLowerCase(),
//                   "image": _imageController.text
//                 });
//                 ScaffoldMessenger.of(context)
//                     .showSnackBar(SnackBar(content: Text('Category Updated')));
//               } else {
//                 DbService().updateCategory(docId: widget.categoryid, data: {
//                   "name": _categoryController.text.toLowerCase(),
//                   "image": _imageController.text
//                 });
//               }
//             }
//           },
//           child: Text('Submit'),
//         ),
//         TextButton(
//           onPressed: () {
//             Navigator.pop(context);
//           },
//           child: Text('Cancel'),
//         ),
//       ],
//     );
//   }
// }
//-------------------------------------------------------------------old======================



old admin home

import 'package:flutter/material.dart';
import 'package:pet_door_admin/Controllers/authentication_service.dart';
import 'package:pet_door_admin/Controllers/db_service.dart';
import 'package:pet_door_admin/Provider/admin_provider.dart';
import 'package:pet_door_admin/models/product_model.dart';
import 'package:pet_door_admin/views/view_categories.dart';
import 'package:pet_door_admin/widgets/appbar.dart';
import 'package:provider/provider.dart';

class AdminHome extends StatefulWidget {
  const AdminHome({super.key});

  @override
  State<AdminHome> createState() => _AdminHomeState();
}

class _AdminHomeState extends State<AdminHome> {
  int _currentIndex = 0;

  final List<Widget> _pages = [
    Center(
        child: Text('Home',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold))),
    Center(
        child: Text('Orders',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold))),
    Center(
        child: Text('Orders',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold))),
    Center(
        child: Text('Donations',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold))),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
    if (index == 1) {
      Navigator.push(
          context, MaterialPageRoute(builder: (context) => ViewCategories()));
    } else if (index == 0) {
      Navigator.push(
          context, MaterialPageRoute(builder: (context) => AdminHome()));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomAppBar(
        title: 'Admin Home',
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            color: Colors.white,
            onPressed: () {
              AuthService().logout();
              Navigator.pushNamedAndRemoveUntil(
                  context, "/login", (route) => false);
            },
          ),
        ],
      ),
      body: Consumer<AdminProvider>(
        builder: (context, value, child) {
          List<AnimalModel> products =
              AnimalModel.fromJsonList(value.animals) as List<AnimalModel>;

          if (products.isEmpty) {
            return Center(child: Text("No Animals Found"));
          }
          return ListView.builder(
            itemCount: products.length,
            itemBuilder: (context, index) {
              return Card(
                elevation: 4,
                margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: InkWell(
                  onLongPress: () {
                    showDialog(
                        context: context,
                        builder: (context) => AlertDialog(
                              title: Text("Choose what you want"),
                              actions: [
                                TextButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                      showDialog(
                                          context: context,
                                          builder: (context) =>
                                              AdditionalConfirm(
                                                  contentText:
                                                      "Are you sure you want to delete this product?",
                                                  onYes: () {
                                                    DbService().deleteAnimals(
                                                        docId:
                                                            products[index].id);
                                                    Navigator.pop(context);
                                                  },
                                                  onNo: () {
                                                    Navigator.pop(context);
                                                  }));
                                    },
                                    child: Text("Delete Product")),
                              ],
                            ));
                  },
                  onTap: () => Navigator.pushNamed(context, "",
                      arguments: products[index]),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.network(
                                products[index].image,
                                height: 80,
                                width: 80,
                                fit: BoxFit.cover,
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    products[index].name,
                                    style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold),
                                    maxLines: 2,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  SizedBox(height: 4),
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      Text(
                                        "₹ ${products[index].amount.toString()}",
                                        style: TextStyle(
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.orange,
                                        ),
                                      ),
                                      Container(
                                        padding: EdgeInsets.all(4),
                                        decoration: BoxDecoration(
                                          color: Theme.of(context).primaryColor,
                                          borderRadius:
                                              BorderRadius.circular(8),
                                        ),
                                        child: Text(
                                          products[index]
                                              .category
                                              .toUpperCase(),
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontWeight: FontWeight.bold),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                            IconButton(
                              icon: Icon(Icons.delete_outline),
                              onPressed: () {
                                showDialog(
                                    context: context,
                                    builder: (context) => AlertDialog(
                                          title: Text("Delete Product"),
                                          content: Text(
                                              "Are you sure you want to delete this product?"),
                                          actions: [
                                            TextButton(
                                                onPressed: () {
                                                  DbService().deleteAnimals(
                                                      docId:
                                                          products[index].id);
                                                  Navigator.pop(context);
                                                },
                                                child: Text("Yes")),
                                            TextButton(
                                                onPressed: () {
                                                  Navigator.pop(context);
                                                },
                                                child: Text("No")),
                                          ],
                                        ));
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(context, "/addanimal");
        },
        child: const Icon(Icons.add),
        backgroundColor: Colors.grey,
        elevation: 6,
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.deepPurpleAccent, Colors.blueAccent],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              offset: const Offset(0, -4),
              blurRadius: 10,
            ),
          ],
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(30),
            topRight: Radius.circular(30),
          ),
        ),
        child: BottomNavigationBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          currentIndex: _currentIndex,
          onTap: _onItemTapped,
          selectedItemColor: Colors.white,
          unselectedItemColor: Colors.white.withOpacity(0.6),
          items: const <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(Icons.dashboard),
              label: 'Dashboard',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.settings),
              label: 'Category',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.assessment),
              label: 'Orders',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.volunteer_activism),
              label: 'Donations',
            ),
          ],
          type: BottomNavigationBarType.fixed,
        ),
      ),
    );
  }
}
